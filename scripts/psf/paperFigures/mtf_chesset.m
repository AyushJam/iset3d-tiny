
%% Compare optical irradiance image generated by Omni vs RTF
clear ; close all
ieInit
if ~piDockerExists, piDockerConfig; end

%% The chess set with pieces

% This just loads the scene.

thisR=piRecipeDefault('scene name','chessSet');
%thisR=piRecipeDefault('scene name','flatSurface');


% The scene
%
% piWRS(chessR);

%% Not needed, I think



%% Set camera position

filmZPos_m           = -1.5;
thisR.lookAt.from(3)= filmZPos_m;
%thisR.lookAt.to(3)= filmZPos_m+1;
distanceFromFilm_m   = 1.469+50/1000

%% Merge chart and chessset



% Render the scene
thisDocker = 'vistalab/pbrt-v3-spectral:raytransfer-spectral';

% The pinhole version after potentially moving and scaling the slanted bar
% piWRS(chessR);


apertureDiameter_mm=5;
filmdiagonal_mm=40;


%% Add a lens and render.
%camera = piCameraCreate('omni','lensfile','dgauss.22deg.12.5mm.json');

cameraOmni = piCameraCreate('omni','lensfile','dgauss.22deg.50.0mm_aperture6.0.json');
cameraOmni.filmdistance.type = 'float'
cameraOmni.filmdistance.value = 0.037959;
cameraOmni = rmfield(cameraOmni,'focusdistance')
cameraOmni.aperturediameter.value = apertureDiameter_mm

thisR.set('camera',cameraOmni);
thisR.set('film diagonal',filmdiagonal_mm,'mm');



%%  We could not work from here.  BUt we think you know what to do.
%
% Call me or Zheng if you need help! (BW)

cameraRTF = piCameraCreate('raytransfer','lensfile','dgauss.22deg.50.0mm_aperture6.0.json-filmtoscene-raytransfer.json')
%cameraRTF = piCameraCreate('raytransfer','lensfile','/home/thomas42/Documents/MATLAB/libs/isetlens/local/dgauss.22deg.50.0mm_aperture6.0.json-raytransfer.json')
cameraRTF.filmdistance.value=0.037959;
cameraRTF.aperturediameter.value=apertureDiameter_mm
cameraRTF.aperturediameter.type='float'

thisR.set('pixel samples',30)


thisR.set('film diagonal',filmdiagonal_mm,'mm');
thisR.set('film resolution',[300 300])
    


%%
thisR.integrator.subtype='path'

thisR.integrator.numCABands.type = 'integer';
thisR.integrator.numCABands.value =1


%% Change the focal distance

% This series sets the focal distance and leaves the slanted bar in place
% at 2.3m from the camera
%chessR.set('focal distance',0.2);   % Original distance z value of the slanted bar
% Omni
thisR.set('camera',cameraOmni);
oiOmni = piWRS(thisR,'render type','radiance','dockerimagename',thisDocker);


% 
% % RTF
thisR.set('camera',cameraRTF);
oiRTF = piWRS(thisR,'render type','radiance','dockerimagename',thisDocker);
 
 
 
oiList = {oiOmni,oiRTF};



%save('/scratch/thomas42/oiList.mat')

return


%% Make comparison figures

oiLabel = {'omni', 'RTF'}
for o=1:numel(oiList)
    oi=oiList{o};
    oiWindow(oi)
    
    exportgraphics(gca,['./fig/chess_oi_' oiLabel{o} '.png']);
    close all;
    
end


return

%% Difference image
figure(10);clf
maxnorm=@(x)x/max(x(:));
dataOmni=maxnorm(oiList{1}.data.photons(:,:,1));
dataRTF=maxnorm(oiList{2}.data.photons(:,:,1));
imagesc(dataOmni-dataRTF)
colorbar

%%
clear mtf;
for o=1:numel(oiList)
    %oiWindow(oi);
    
    oi=oiList{o};
    % The pixel size is not the limit!
    sensor = sensorCreate('imx363');
  %  sensor = sensorSet(sensor,'pixel size same fill factor',1.0e-6);
    % How to set correct pixel size given PBRT recipe?
   %  sensor = sensorSet(sensor,'size',2*[5000 5000]);
    %sensor = sensorSet(sensor,'fov',22,oi); % what FOV should I use?
    
    ip = ipCreate;oiList = {oiOmni};

    
    sensor = sensorCompute(sensor,oi);
    ip = ipCompute(ip,sensor);
    
    % MTF Lens
  %   ipWindow(ip)
 %    [locs,rect] = ieROISelect(ip);
%     positions = round(rect.Position);


%     

    positions=[ 3987         716         576         967]
    positions= [8272         577        1152        2342];
    mtf{o}= ieISO12233(ip,sensor,'all',positions);
    
    saveas(gcf,['./fig/MTF-' oi.name '.png'])
    
end

%% MTF Compare RTF met Omni
color{1}='r'
color{2}='g'
color{3}='b'
color{4}='k'
linestyle{1}='-'
linestyle{2}='--'
marker{1}='none'
marker{2}='none'
% Compare visually MTF's


load calculatedMTF.mat
fig=figure;clf;
fig.Position= [498 419 1101 245];
for o=1:numel(mtf)
    for k =1:4
        subplot(1,4,k); hold on;
        h(o)=plot(mtf{o}.freq,mtf{o}.mtf(:,k),'color',color{k},'linestyle',linestyle{o},'marker',marker{o}); hold on;
        plot(freqLensXY{1},MLensXY{1},'k:','linewidth',2)
        plot(freqLensXY{2},MLensXY{2},'k:','linewidth',2)
        ylim([0 1])
        xlim([0 200])
        title('MTF')
        xlabel('Freq. (cy/mm)')
        
    end
    
end
legend(h,'Omni','RTF')

%saveas(gcf,'./fig/MTF-comparison.png')
